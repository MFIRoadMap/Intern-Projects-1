/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package magza_desktop;

import Beans.UrunBeans;
import com.fazecast.jSerialComm.SerialPort;
import com.fazecast.jSerialComm.SerialPortDataListener;
import com.fazecast.jSerialComm.SerialPortEvent;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author furka
 */
public class MagzaAnaKasa_Frame extends javax.swing.JFrame {

    dbConn db_conn = new dbConn();
    Connection con = null;

    String PersonelId = null, PersonelIsım = null, PersonelSoyisim = null, SecilenKasa = null;
    Detecter dt = new Detecter();
    ArrayList<UrunBeans> barcodes = new ArrayList<>();
    String YuklemeCekmeKartId = "", YuklemeCekmeKartBakiye = "", YuklemeCekmeKartKartCVV = "", YuklemeCekmeKartKartSKT = "", YuklemeCekmeKartKartSifre = "", YuklemeCekmeKartKartKayitTarih = "";
    String MusteriId = "", MusteriIsim = "", MusteriSoyIsim = "", MusteriFisNo = "", MusteriSifre = "";
    String SatisKartId = "", Satis_Fis_Id;;
    double Hesap_Toplami, HesapGoster = 0;

    public MagzaAnaKasa_Frame() {
        initComponents();
    }

    public MagzaAnaKasa_Frame(String PersonelId, String PersonelIsım, String PersonelSoyisim, String SecilenKasa) {
        initComponents();
        this.PersonelId = PersonelId;
        this.PersonelIsım = PersonelIsım;
        this.PersonelSoyisim = PersonelSoyisim;
        this.SecilenKasa = SecilenKasa;

        //Her metotta ayrı ayrı bağlanmak terine sayfa açıldığında bir kkere bağlanıyorum
        con = db_conn.getConnection_Magza_DB();
        //Kasa açıldığındabarkod için barkod cihazını dinlemeyet açıyorum
        initializeSerialPort();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        Alinanlar_Table = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        Para_Yukle_Button = new javax.swing.JButton();
        Bakiye_Textfield = new javax.swing.JTextField();
        hazir1 = new javax.swing.JLabel();
        Okunan_Id_Label = new javax.swing.JLabel();
        Okunan_Id_Label1 = new javax.swing.JLabel();
        Para_Cekim_Button = new javax.swing.JButton();
        MecvutPara_jLabel = new javax.swing.JLabel();
        Kart_Okut_Button = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        Temizle_Button = new javax.swing.JButton();
        hazir = new javax.swing.JLabel();
        Iade_Button = new javax.swing.JButton();
        Urun_Cıkar_Button = new javax.swing.JButton();
        Odeme_Button = new javax.swing.JButton();
        MecvutPara_jLabel1 = new javax.swing.JLabel();
        OdenecekTutarMiktarı_jLabel = new javax.swing.JLabel();
        Siparis_Button = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        KasaKapat_jMenuItem = new javax.swing.JMenuItem();

        jMenu3.setText("File");
        jMenuBar2.add(jMenu3);

        jMenu4.setText("Edit");
        jMenuBar2.add(jMenu4);

        jMenu2.setText("jMenu2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Alinanlar_Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "BARKOD", "MARKA", "İSİM", "FİYAT"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(Alinanlar_Table);

        Para_Yukle_Button.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Para_Yukle_Button.setText("YÜKLE");
        Para_Yukle_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Para_Yukle_ButtonActionPerformed(evt);
            }
        });

        Bakiye_Textfield.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        hazir1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        hazir1.setText("PARA YÜKLEME");

        Okunan_Id_Label.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Okunan_Id_Label.setText("MİKTAR");

        Okunan_Id_Label1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Okunan_Id_Label1.setText("TL");

        Para_Cekim_Button.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Para_Cekim_Button.setText("ÇEK");
        Para_Cekim_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Para_Cekim_ButtonActionPerformed(evt);
            }
        });

        MecvutPara_jLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        Kart_Okut_Button.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Kart_Okut_Button.setText("OKUT");
        Kart_Okut_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Kart_Okut_ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(Para_Cekim_Button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(Para_Yukle_Button)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(Okunan_Id_Label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Kart_Okut_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(39, 39, 39))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(hazir1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(MecvutPara_jLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(Bakiye_Textfield, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(Okunan_Id_Label1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(12, 12, 12)))
                        .addGap(25, 25, 25))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(hazir1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Kart_Okut_Button, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Okunan_Id_Label, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(Bakiye_Textfield, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(Okunan_Id_Label1, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(MecvutPara_jLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Para_Cekim_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Para_Yukle_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        Temizle_Button.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Temizle_Button.setText("TEMİZLE");
        Temizle_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Temizle_ButtonActionPerformed(evt);
            }
        });

        hazir.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        hazir.setText("İŞLEMLER");

        Iade_Button.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Iade_Button.setText("İADE");
        Iade_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Iade_ButtonActionPerformed(evt);
            }
        });

        Urun_Cıkar_Button.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Urun_Cıkar_Button.setText("URUN ÇIKAR");
        Urun_Cıkar_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Urun_Cıkar_ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Temizle_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Iade_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Urun_Cıkar_Button))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(hazir, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(hazir, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Iade_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(Temizle_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Urun_Cıkar_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );

        Odeme_Button.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Odeme_Button.setText("ÖDE");
        Odeme_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Odeme_ButtonActionPerformed(evt);
            }
        });

        MecvutPara_jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        MecvutPara_jLabel1.setText("Ödenecek Tutar Miktarı");

        OdenecekTutarMiktarı_jLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        Siparis_Button.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        Siparis_Button.setText("Siparişler");
        Siparis_Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Siparis_ButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(MecvutPara_jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(OdenecekTutarMiktarı_jLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35)
                        .addComponent(Siparis_Button)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Odeme_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 631, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(31, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(Odeme_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Siparis_Button, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(4, 4, 4))
                            .addComponent(OdenecekTutarMiktarı_jLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(MecvutPara_jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(1, 1, 1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        jMenu1.setText("Seçenekler");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });

        KasaKapat_jMenuItem.setText("Kasa Kapat");
        KasaKapat_jMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                KasaKapat_jMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(KasaKapat_jMenuItem);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void Urun_Cıkar_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Urun_Cıkar_ButtonActionPerformed

        //tablodan bir stun seçilmiş ise kullanılır
        if (Alinanlar_Table.getSelectedRow() != -1) {
            int secilen = Alinanlar_Table.getSelectedRow();
            
            double tmpfiyat = Double.valueOf(barcodes.get(secilen).getUrun_Fiyat());
            HesapGoster -= tmpfiyat;
            String tmpHesapGoster = String.valueOf(HesapGoster);
            OdenecekTutarMiktarı_jLabel.setText(tmpHesapGoster);
            
            barcodes.remove(secilen);
            ((DefaultTableModel) Alinanlar_Table.getModel()).removeRow(secilen);
        } else {
            JOptionPane.showMessageDialog(null, "Lütfen Tabloda Çıkarmak İstediğiniz Satırı Seçin");
        }
    }//GEN-LAST:event_Urun_Cıkar_ButtonActionPerformed

    private void Para_Yukle_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Para_Yukle_ButtonActionPerformed

        String Miktar = Bakiye_Textfield.getText();
        double BakiyeYukle = Double.valueOf(Miktar);
        double Bakiye = Double.valueOf(YuklemeCekmeKartBakiye);
        if (!Miktar.equals("") && !YuklemeCekmeKartId.equals("") && dt.Ondalik_Mi(Miktar)) {
            Kart_Bakiye_Yukle(YuklemeCekmeKartId, Bakiye, BakiyeYukle);
            Bakiye_Textfield.setText("");
            MecvutPara_jLabel.setText("");
        } else {
            JOptionPane.showMessageDialog(null, "Kartınızı okutmadınız veya geçerli miktar girmediniz. Tekrar deneyiniz.");
            Bakiye_Textfield.setText("");
            MecvutPara_jLabel.setText("");
        }
    }//GEN-LAST:event_Para_Yukle_ButtonActionPerformed

    //KULLANICININ KARTINA PARA YÜKLENİYOR
    public void Kart_Bakiye_Yukle(String Kart_Id, double Bakiye, double BakiyeYukle) {

        double Result = Bakiye + BakiyeYukle;

        String query = "UPDATE  Kart_Table SET Kart_Bakiye = ? Where Kart_Id = ?";
        try {

            PreparedStatement ps = con.prepareStatement(query);
            
            ps.setDouble(1, Result);
            ps.setString(2, Kart_Id);

            ps.executeUpdate();
            JOptionPane.showMessageDialog(null, "Para yükleme işlemi başarılı. Güncel bakiyeniz " + Result + "TL");
        } catch (Exception ex) {
            // TODO: handle exception
            JOptionPane.showMessageDialog(null, "Kart'a bakiye yüklenemedi");
        }
    }

    //kart varlığını kontrol ederken bakiye bilgisini de alıyorum
    public void Kart_Sorgu(String Kart_Id) {
        //kart ıd uniq olduğu için sorun çıkmayacaktır
        String query;
        try {

            Statement st = con.createStatement();
            query = "SELECT * FROM Kart_Table WHERE Kart_Id = '"+ Kart_Id +"'";
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                YuklemeCekmeKartBakiye = rs.getString("Kart_Bakiye");
                YuklemeCekmeKartKartCVV = rs.getString("Kart_CVV");
                YuklemeCekmeKartKartSKT = rs.getString("Kart_SKT");
                YuklemeCekmeKartKartSifre = rs.getString("Kart_Sifre");
                YuklemeCekmeKartKartKayitTarih = rs.getString("Kart_Kayit_Tarih");
            }
            MecvutPara_jLabel.setText(YuklemeCekmeKartBakiye);

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Kart Bilgileri Bulunamadı");
        }
    }
    //--------------------------------------------------------------------------------------------
//kart bilgilerinin varlığını konrtol ediyorum


    private void Odeme_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Odeme_ButtonActionPerformed
       //   io.Ses_Modul("C:\\Users\\MFİ\\Documents\\NetBeansProjects\\bitirmeProje\\src\\wav\\lutfen_kart_okut.wav");
        String Kart_Id = dt.kartOku();
        SatisKartId = Kart_Id;
        double Toplam_Hesap = Urun_Fiyat_Degeri();
        double K_Bakiye = Bakiye_Sorgu(Kart_Id);

        System.out.println("hesap" + Toplam_Hesap);
        System.out.println("bakiye" + K_Bakiye);
        if (!barcodes.isEmpty()) {
            //müşterinin bakiyesi kontrol ediliyor önce
            if (Toplam_Hesap <= K_Bakiye) {
                System.out.println("satın alınabilir");
                //BU KISIMDAN SONRA SATINALMA İLEMLERİ GERÇEKLEŞECEK

                //İLK OLARAK MÜLTERİ BİLGİLERİNİ ALMAK GEREKİYOR - AYRICA BURADA URUNLERİN STOK BİLGİLERİNİ DE GÜNCELLİYORUM
                if (MusteriBilgiGetir(Kart_Id)) {
                    //Burada satıs tablosuna girişleri tamamladıkta sonra fis tablosuna girişleri tanımlıyorum
                    if (AlisverisFisTableOlustur()) {
                        //Burada müşteri bilgileri sorunsuz çekildiyse satış tablosuna girişleri oluşturuyorum
                        if (StisTableGirisler(Kart_Id)) {
                            barcodes.clear();

                            //Müşteri kartından para eksilt
                            if (Kart_Bakiye_Guncelleme()) {

                                    //Tabloyu temizle(barkod listesi boşaltıldı. Yine de anasayfayı yeniden yüklemek yeterli olacaktır.)
                                    double Kalan_Bakiye = K_Bakiye - Toplam_Hesap;
                                    JOptionPane.showMessageDialog(null, "Alışveriş Başarıyla Yapıldı. Kalan Bakiyeniz " + Kalan_Bakiye);

                                    //port dinlemeyi kapatım sayfaya gelddiğimde tekrar açıyorum ki zamanlama hatası olmadan doğru çalışsın
                                    try {
                                        closePort();
                                    } catch (Exception ex) {
                                        Logger.getLogger(MagzaJetKasa2_Frame.class.getName()).log(Level.SEVERE, null, ex);
                                    }

                                    //burada table kısmını sıfırlamak için tekrar kendi üzerine gönderiyorum
                                    MagzaAnaKasa_Frame mjf = new MagzaAnaKasa_Frame(PersonelId, PersonelIsım, PersonelSoyisim, SecilenKasa);
                                    setVisible(false);
                                    mjf.setVisible(true);
                                
                            }
                        }
                    }
                }
            } else {
                JOptionPane.showMessageDialog(null, "Bakiyeniz Bu Ürünleri Almaya Yetmemektedir. Ürün Çıkarın Veya Bakiye Yükleyin ");

            } //BURADA SATIŞ SONRASI LİSTEYİ TEMİZLEMEM VE TABLOYU TEKRAR LİSTELEMEM YETERLİ OLCSKTIR

        } else {
            JOptionPane.showMessageDialog(null, "Lütfen Önce Ürün Okutunuz");

        }
    }//GEN-LAST:event_Odeme_ButtonActionPerformed

     public boolean MusteriBilgiGetir(String Kart_Id) {
        String query;
        boolean Durum = true;
        try {

            Statement st = con.createStatement();
            query = "select * from Musteri_Table MT, Musteri_Kart_Table MKT where MKT.MKT_Kart_Id = '" + Kart_Id + "' and MKT.MKT_Musteri_Id = MT.Musteri_Id";
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                MusteriId = rs.getString("Musteri_Id");
                MusteriIsim = rs.getString("Musteri_Isim");
                MusteriSoyIsim = rs.getString("Musteri_SoyIsim");
                MusteriSifre = rs.getString("Musteri_Sifre");

            }
        } catch (Exception e) {
            Durum = false;
            JOptionPane.showMessageDialog(null, "müsteri Bilgileri Bulunamadı");
        }
        return Durum;
    }

    //Burada alınan ürünler satış tablosuna kaydını tamamladıktan sonra fiş tablosuna kaydını tamamlıyorum
    public boolean AlisverisFisTableOlustur() {
        boolean Durum = true;
        String query = "INSERT INTO  Satis_Fis_Table (Satis_Musteri_Id, Satis_Kart_Id, Satis_Toplam_Tutar, Satis_Tarih)"
                + " VALUES (?, ?, ?, GETDATE())";

        try {

            PreparedStatement ps = con.prepareStatement(query);
            System.out.println();
            ps.setString(1, MusteriId);
            ps.setString(2, SatisKartId);
            ps.setDouble(3, HesapGoster);

            ps.executeUpdate();

            SatisFisNoBulma();
            System.out.println("satis ıd"+Satis_Fis_Id);
        } catch (Exception ex) {
            Durum = false;
            JOptionPane.showMessageDialog(null, "Fis tablosu oluşturulurken sorun yaşandı");
            // TODO: handle exception
        }
        return Durum;
    }
    //fiş tablosunu oluşturduktan sonra son oluşturukan son fiş numarasını alıyorum

    public boolean SatisFisNoBulma() {
        String query;
        double Toplam = 0;
        boolean Durum = true;
        try {

            Statement st = con.createStatement();
            query = "select top 1 Satis_Fis_Id from Satis_Fis_Table , Musteri_Table  where Musteri_Id ="+MusteriId+" and Musteri_Id = Satis_Musteri_Id order by Satis_Fis_Id DESC";
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                Satis_Fis_Id = rs.getString("Satis_Fis_Id");

            }
        } catch (Exception e) {
            Durum = false;
            JOptionPane.showMessageDialog(null, "sfıd Bilgileri Bulunamadı");
        }
        return Durum;
    }

    //Buradasatış tablosuna alınan ürünlerin kaydını ekliyorum
    public boolean StisTableGirisler(String Kart_Id) {
        boolean Durum = true;
        String query = "INSERT INTO  Satis_Table (Satis_Urun_Barkod, Satis_Musteri_Id, Satis_Fis_Id, Satis_Durum, Satis_Tarih, Satis_Kasa_Id)"
                + " VALUES (?, ?, ?, ?, GETDATE(), ?)";
        for (int i = 0; i < barcodes.size(); i++) {
            //BİR AKSİLİK DURUMUNDA DİĞER TABLOLARIN DA KAYIT YAPMAMASINI SAĞLIYORUM
            //Burada alınan her ürünün stok değerini de güncelliyorum                                      kasaya miktar ekleniyor
            System.out.println(barcodes.get(i).getUrun_Barkod() + " " + MusteriId + " " + MusteriFisNo + " " + SecilenKasa);
            if (UrunTableStok_Guncelle(barcodes.get(i).getUrun_Barkod())) {
                try {

                    PreparedStatement ps = con.prepareStatement(query);
                    System.out.println();
                    ps.setString(1, barcodes.get(i).getUrun_Barkod());
                    ps.setString(2, MusteriId);
                    ps.setString(3, Satis_Fis_Id);
                    ps.setString(4, "S");
                    ps.setString(5, SecilenKasa);

                    ps.executeUpdate();

                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(null, "satiş tablosu oluşturulamadı");
                    // TODO: handle exception
                }
            } else {
                Durum = false;
                JOptionPane.showMessageDialog(null, "Bir Hata Oluştu Lütfen Tekrar Deneyiniz");
            }
        }
        return Durum;
    }

    //SATIŞ SONRASI ÜRÜNÜN STOK DEĞERİ AZALTILIYOR
    public boolean UrunTableStok_Guncelle(String Urun_Barkod) {
        String query = "UPDATE  Urun_Table SET Urun_Stok = Urun_Stok - 1 Where Urun_Barkod = ?";
        boolean result = false;
        try {

            PreparedStatement ps = con.prepareStatement(query);
            ps.setString(1, Urun_Barkod);

            ps.executeUpdate();
            result = true;
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Stok değerinde hata oluştu Sıkıntılı");
            // TODO: handle exception
        }
        return result;
    }

    //KULLANICININ BAKİYESİ AZALTILIYOR (SATIŞ SONRASINDA)
    public boolean Kart_Bakiye_Guncelleme() {
        boolean Durum = true;
        String query = "UPDATE  Kart_Table SET Kart_Bakiye = Kart_Bakiye - ? Where Kart_Id = ?";
        System.out.println("hesap " + Hesap_Toplami);
        System.out.println("ıd " + SatisKartId);
        try {

            PreparedStatement ps = con.prepareStatement(query);
            ps.setDouble(1, Hesap_Toplami);
            ps.setString(2, SatisKartId);

            ps.executeUpdate();

        } catch (Exception ex) {
            Durum = false;
            JOptionPane.showMessageDialog(null, "Bakiye azaltılamadı");
            // TODO: handle exception
        }
        return Durum;
    }



    //-------------------------------------------------------------------------------------------------
    //BURADA ÜRÜNLERİN FİYAT DEĞERLERİNİ HESAPLAYARAK KULLANICININ BAKİYESİNİN YETİP YETMEYECEĞİNE BAKIYORUZ
    public double Urun_Fiyat_Degeri() {

        //kart ıd uniq olduğu için sorun çıkmayacaktır
        String query;
        double Toplam = 0;
        for (int i = 0; i < barcodes.size(); i++) {

            try {

                Statement st = con.createStatement();
                query = "SELECT * FROM Urun_Table WHERE Urun_Barkod = '"+barcodes.get(i).getUrun_Barkod()+"'";
                ResultSet rs = st.executeQuery(query);
                while (rs.next()) {
                    Toplam += Double.valueOf(rs.getString("Urun_Fiyat"));
                }
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Ürün Bilgileri Bulunamadı");
            }
        }
        System.out.println("toplam fiyarı = " + Toplam);
        Hesap_Toplami = Toplam;
        return Toplam;
    }

//ALINACAK ÜRÜNLE İÇİN BAKİYENİN YETİP YETMEYECEİNİ KONTROL EDİYORUZ
    public double Bakiye_Sorgu(String Kart_Id) {

        //kart ıd uniq olduğu için sorun çıkmayacaktır
        String query;
        double K_Bakiye = 0;
        UrunBeans ub;

        try {

            Statement st = con.createStatement();
            query = "SELECT * FROM Kart_Table WHERE Kart_Id = '"+Kart_Id+"'";
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                K_Bakiye = Double.valueOf(rs.getString("Kart_Bakiye"));
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Kart Bilgileri Bulunamadı");
        }
        return K_Bakiye;
    }


    private void Temizle_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Temizle_ButtonActionPerformed

        while (!barcodes.isEmpty()) {
            ((DefaultTableModel) Alinanlar_Table.getModel()).removeRow(0);
            barcodes.remove(0);

        }
        
        HesapGoster = 0;
        String tmpHesapGoster = String.valueOf(HesapGoster);
        OdenecekTutarMiktarı_jLabel.setText(tmpHesapGoster);
    }//GEN-LAST:event_Temizle_ButtonActionPerformed

    private void Iade_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Iade_ButtonActionPerformed
         
        MagzaAnaKasaIade_Frame maif = new MagzaAnaKasaIade_Frame(PersonelId, PersonelIsım, PersonelSoyisim, SecilenKasa);
        //sayfaya giderken kapatıyorum ki orada okumada port açık olunca hata alıyorum orada kontrollü alım yapıyorum
        try {
            closePort();
        } catch (Exception ex) {
            Logger.getLogger(MagzaAnaKasa_Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
        setVisible(false);
        maif.setVisible(true);
         
    }//GEN-LAST:event_Iade_ButtonActionPerformed

    private void KasaKapat_jMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_KasaKapat_jMenuItemActionPerformed
        //ÖNCELİKLE BARKOD İÇİN AÇTIĞIM PORTU KAPATTIM
        try {
            closePort();
        } catch (Exception ex) {
            Logger.getLogger(MagzaAnaKasa_Frame.class.getName()).log(Level.SEVERE, null, ex);
        }

        YetkiliKontrol_Frame mgf = new YetkiliKontrol_Frame(PersonelId, PersonelIsım, PersonelSoyisim, SecilenKasa);
        setVisible(false);
        mgf.setVisible(true);

    }//GEN-LAST:event_KasaKapat_jMenuItemActionPerformed

    private void Para_Cekim_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Para_Cekim_ButtonActionPerformed

        String Miktar = Bakiye_Textfield.getText();

        if (!Miktar.equals("") && !YuklemeCekmeKartId.equals("") && dt.Ondalik_Mi(Miktar)) {
            double TmpMiktar = Double.valueOf(Miktar);
            double BakiyeCek = Double.valueOf(YuklemeCekmeKartBakiye);
            if (TmpMiktar <= BakiyeCek) {
                Kart_Bakiye_Cek(YuklemeCekmeKartId, BakiyeCek, TmpMiktar);
                JOptionPane.showMessageDialog(null, "Çekme İşlemi Başarıyla Gerçekleştirilmiştir");
                Bakiye_Textfield.setText("");
                MecvutPara_jLabel.setText("");
            } else {
                JOptionPane.showMessageDialog(null, "Bakiyenizden yüksek değer çekmek istiyorsunuz. Tekrar deeyin.");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Kartınızı okutmadınız veya geçerli miktar girmediniz. Tekrar deneyiniz.");
            Bakiye_Textfield.setText("");
            MecvutPara_jLabel.setText("");
        }
    }//GEN-LAST:event_Para_Cekim_ButtonActionPerformed
    public void Kart_Bakiye_Cek(String Kart_Id, double Bakiye, double BakiyeCek) {

        double Result = Bakiye - BakiyeCek;

        String query = "UPDATE  Kart_Table SET Kart_Bakiye = ? Where Kart_Id = ?";
        try {

            PreparedStatement ps = con.prepareStatement(query);
            ps.setDouble(1, Result);
            ps.setString(2, Kart_Id);

            ps.executeUpdate();
            JOptionPane.showMessageDialog(null, "Para çekme işlemi başarılı. Güncel bakiyeniz " + Result + "TL");
        } catch (Exception ex) {
            // TODO: handle exception
            JOptionPane.showMessageDialog(null, "Kart'a bakiye çekilemedi");
        }
    }


    private void Kart_Okut_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Kart_Okut_ButtonActionPerformed

        YuklemeCekmeKartId = dt.kartOku();
        System.out.println("kart" + YuklemeCekmeKartId);
        //Kartı aşlem yapmadan öcnce okutuyorum
        Kart_Sorgu(YuklemeCekmeKartId);
    }//GEN-LAST:event_Kart_Okut_ButtonActionPerformed

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed

        MagzaGiris_Frame mgf = new MagzaGiris_Frame();

        try {
            closePort();
        } catch (Exception ex) {
            Logger.getLogger(MagzaAnaKasa_Frame.class.getName()).log(Level.SEVERE, null, ex);
        }
        setVisible(false);
        mgf.setVisible(true);


    }//GEN-LAST:event_jMenu1ActionPerformed

    private void Siparis_ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Siparis_ButtonActionPerformed
       
        MagzaSiparis_JFrame msf = new MagzaSiparis_JFrame(PersonelId, PersonelIsım, PersonelSoyisim, SecilenKasa);
        setVisible(false);
        msf.setVisible(true);
        
    }//GEN-LAST:event_Siparis_ButtonActionPerformed

    // BURASI ÜRÜNÜ BARKODU OKUTUP LİSTEYE EKLEDİĞİ KISMI--------------------------------------------------
    // burasıyla barkodları hızlıca okuyacağım
    String okunan;
    SerialPort serialPort;
    String conPort = "COM4";
    int baudrate = 115200;

    public void closePort() throws Exception {
        if (serialPort != null) {
            serialPort.removeDataListener();
            serialPort.closePort();
        }
    }

    void initializeSerialPort() {

        serialPort = SerialPort.getCommPort(conPort);
        serialPort.openPort();
        serialPort.setBaudRate(baudrate);
        serialPort.addDataListener(new SerialPortDataListener() {
            @Override
            public int getListeningEvents() {
                return SerialPort.LISTENING_EVENT_DATA_AVAILABLE;
            }

            @Override
            public void serialEvent(SerialPortEvent event) {
                //mevcut bir olay olup olmadığını kontrol ediyorum
                if (event.getEventType() != SerialPort.LISTENING_EVENT_DATA_AVAILABLE) {
                    return;
                }
                //bir olay tetiklendiyse çalışacak
                //veri boyutunda byte dizisi oluşturuyorum
                byte[] newData = new byte[serialPort.bytesAvailable()];

                //readbytes ile verileri okuyarak diziye atiyorum aynı zamanda okunan verilerin boyutunu kaydediyorum(numread)
                int numRead = serialPort.readBytes(newData, newData.length);

                if (numRead > 0) {
                    for (int i = 0; i < newData.length; ++i) {
                        //burasıyla boş karakterleri trim metoduyla kaldırıyorum
                        if ((char) newData[i] == '\n' || (char) newData[i] == '\r') {
                            okunan = okunan.trim();
                            if (okunan.length() > 0) {
                                Okunan_Deger_Isle(okunan);
                            }
                            //okunan verileri ayırt edebimek için okuma bitiminde 
                            //barkod değişkenini temizliyorum ki sonraki veri önceki verinin üzerine eklenmesin
                            okunan = "";
                        } //boşluk dışındaki karakterleri okunan değişkeinde depoluyorum
                        else {
                            okunan = okunan + (char) newData[i];
                        }
                    }
                }
            }
        });
    }

    public void Okunan_Deger_Isle(String Urun_Barkod) {
        //okunan barkod numarasında harf varsa temizleyerek işlem yapıyorum
        if (Character.isLetter(Urun_Barkod.charAt(0))) {
            Urun_Barkod = duzenle(Urun_Barkod);
        }
        if (Urun_Barkod != null) {
            //çalışacak metotlar gelecek
            Veritabanında_Bul(Urun_Barkod);
            System.out.println("Received: " + Urun_Barkod);
        }
    }

    //ilk okunan barkodun başındaki null yazısını kaldırmak için
    public String duzenle(String Urun_Barkod) {
        String result = "";
        for (int i = 0; i < Urun_Barkod.length(); i++) {
            if (!Character.isLetter(Urun_Barkod.charAt(i))) {
                result += Urun_Barkod.charAt(i);
            }
        }

        return result;
    }
    //OKUULAN DEĞERLERİ VERİ TABANINDAN ÇEKEREK TABLOYA YAZMAK İÇİN KULLANILIYOR

    public void Veritabanında_Bul(String barcode) {

        String U_Barkod, U_Marka, U_Isim, U_Durum, U_Stok, U_Fiyat, query;
        byte [] UrunImage = null;
        UrunBeans ub;

        try {

            Statement st = con.createStatement();
            query = "SELECT * FROM Urun_Table WHERE Urun_Barkod ='"+barcode+"'";
            ResultSet rs = st.executeQuery(query);

            while (rs.next()) {
                U_Barkod = rs.getString("Urun_Barkod");
                U_Marka = rs.getString("Urun_Marka");
                U_Isim = rs.getString("Urun_Isim");
                U_Stok = rs.getString("Urun_Stok");
                U_Durum = rs.getString("Urun_Durum");
                U_Fiyat = rs.getString("Urun_Fiyat");
                UrunImage = rs.getBytes("Urun_Gorsel");

                if (!U_Barkod.equals("") && !U_Stok.equals("0")) {
                    
                    ub = new UrunBeans(U_Barkod, U_Marka, U_Isim, U_Stok, U_Durum, U_Fiyat, UrunImage);
                    barcodes.add(ub);
                    Show_Urun_Bean_List(ub);
                    
                }
                if (U_Stok.equals("0")) {
                    JOptionPane.showMessageDialog(null, "Ürünümüz Stokta Bulunmamaktadır");
                }

            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }

    }

    public void Show_Urun_Bean_List(UrunBeans ul) {

        DefaultTableModel model = (DefaultTableModel) Alinanlar_Table.getModel();
        Object[] row = new Object[4];

        row[0] = ul.getUrun_Barkod();
        row[1] = ul.getUrun_Marka();
        row[2] = ul.getUrun_Isim();
        row[3] = ul.getUrun_Fiyat();
        model.addRow(row);
        
        double tmpfiyat = Double.valueOf(ul.getUrun_Fiyat());
        HesapGoster += tmpfiyat;
        String tmpHesapGoster = String.valueOf(HesapGoster);
        OdenecekTutarMiktarı_jLabel.setText(tmpHesapGoster);
    }

    //---------------------------------------------------------------------------------------------
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MagzaAnaKasa_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MagzaAnaKasa_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MagzaAnaKasa_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MagzaAnaKasa_Frame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MagzaAnaKasa_Frame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Alinanlar_Table;
    private javax.swing.JTextField Bakiye_Textfield;
    private javax.swing.JButton Iade_Button;
    private javax.swing.JButton Kart_Okut_Button;
    private javax.swing.JMenuItem KasaKapat_jMenuItem;
    private javax.swing.JLabel MecvutPara_jLabel;
    private javax.swing.JLabel MecvutPara_jLabel1;
    private javax.swing.JButton Odeme_Button;
    private javax.swing.JLabel OdenecekTutarMiktarı_jLabel;
    private javax.swing.JLabel Okunan_Id_Label;
    private javax.swing.JLabel Okunan_Id_Label1;
    private javax.swing.JButton Para_Cekim_Button;
    private javax.swing.JButton Para_Yukle_Button;
    private javax.swing.JButton Siparis_Button;
    private javax.swing.JButton Temizle_Button;
    private javax.swing.JButton Urun_Cıkar_Button;
    private javax.swing.JLabel hazir;
    private javax.swing.JLabel hazir1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
